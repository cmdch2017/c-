1.实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定，
输入9，输出9*9口诀表，输出12，输出12*12的乘法口诀表。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdlib.h>
#include <stdio.h>
multiple(int n)
{
	int i, j = 0;
	for (i = 1; i <= n; i++)
	{
		printf("\n");
		for (j = 1; j <= i; j++)
			printf("%1d*%1d=%-2d  ", i, j, i*j);//%2d空两格 %02d补足数字0 %-2d左对齐
	}


}

int main()
{
	int n;
	scanf("%d", &n);
	multiple(n);
	system("pause");
	return 0;
}
2.使用函数实现两个数的交换。
void swap(int *a,int *b)
{/
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;

}
3.实现一个函数判断year是不是润年。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
int leap(int year)
{
	if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
	    return 1;
	else
		return 0;

}
int main()
{
	int n,temp;
	printf("输入一个年份");
	scanf("%d", &n);
	temp=leap(n);
	if (temp)
		printf("是闰年");
	else printf("不是");
	system("pause");
	return 0;
}
4.创建一个数组，
实现函数init（）初始化数组、
实现empty（）清空数组、
实现reverse（）函数完成数组元素的逆置。
要求：自己设计函数的参数，返回值。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define length 10
#define elementype int
void init(elementype *arr, int size)//初始化数组
{
	for (int i = 0; i < size; i++)
		arr[i] = i;//data[i]=input[i]思想应该是数组之间的赋值
}
void empty(elementype *arr, int size)
{
	memset(arr, 0, sizeof(arr[0])*size);//for(i=0;i<size;i++) arr[i]==0;
}

void reverse(elementype  *arr, int size)
{
	int left = 0;
	int right = size - 1;
	int temp;
	while (left <= right)
	{
		temp = arr[left];
		arr[left] = arr[right];
		arr[right] = temp;
		left++; right--;
	}
}
void print(elementype *arr, int size)
{
	int i;
	for (i = 0; i < size; i++)
	{
		printf("%d ", arr[i]);
	}   
	printf("\n");
}
int main()
{
	elementype arr[length];
	int size = sizeof(arr) / sizeof(arr[0]);
	init(arr, size);
	print(arr, size);
	reverse(arr, size);
	print(arr, size);
	empty(arr, size);
	print(arr, size);
	system("pause");

	return 0;

}

5.实现一个函数，判断一个数是不是素数。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
int prime_number(int n)
{
	int i, flag = 0;
	for (i = 2; i < n; i++)
	{
		if (n%i == 0)
		{
			flag = 1;
			return 1;
			break;
		}
	}
	if (flag == 0)
		return 0;
}
int main()
{
	int n,temp;
	scanf("%d", &n);
	temp=prime_number(n);
	if (temp)
	printf("和数");
	else printf("质数");
	system("pause");
	return 0;
}