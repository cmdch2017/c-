1.写一个函数返回参数二进制中 1 的个数
比如： 15       0000 1111       4 个 1
程序原型：
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdlib.h>
#define k 2//二进制
int  count_one_bits(unsigned int value)
{
	int i = 0, j = 1;
	int count = 0, sum = 0;
	int temp;
	for (i = value; i; i /= k)
	{
		temp = i%k;
		if (temp == 1) count++;
		sum += temp*j;
		j *= 10;
	}
	return count;

}
int main()
{
	int n;
	scanf("%d", &n);
	int ret=count_one_bits(n);
	printf("%d", ret);
	system("pause");
	return 0;
}

2.获取一个数二进制序列中所有的偶数位和奇数位，分别输出二进制序列。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdlib.h>
#include <stdio.h>
int i = 0,k=2,j=1;
int n= 0,sum=0,sum1=0,sum2=0;
int temp;
int main(){
	scanf("%d", &n);
	for (i = n; i; i /= k)
	{
		temp = i%k;
		sum += temp*j;
		j *= 10;

	}
	j = 1;printf("%d\n", sum);
	for (i = sum; i; i /= 100)
	{
		temp = i%10;
		sum1 += temp*j;
		j *= 10;
	}
	j = 1; 
	for (i = sum/10; i; i /= 100)
	{
		temp = i % 10;
		sum2 += temp*j;
		j *= 10;
	}
	
	printf("%d\n", sum1);//包含个位的取法
	printf("%d", sum2);
	system("pause");
	return 0;
}
3. 输出一个整数的每一位。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <windows.h>
void print(int n)
{	if (n > 9)	
	 print(n / 10);		
        printf("%d ", n % 10);}
int main()
{	
	int num = 0;
	printf("输入一个数：");	
	scanf("%d", &num);	
	print(num);		
	system("pause");
	return 0;}

4.编程实现：
两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？ 
输入例子:
1999 2299
输出例子:7
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <windows.h>
int two(int n){
	int  i, temp;
	int sum = 0, j = 1;
	for (i = n; i; i /= 2)
	{
		temp = i % 2;
		sum = sum + temp*j;
		j *= 10;
	}
	
    return sum;
}
int main()
{
	int n1, n2,answer;
	int sum1 = 0, sum2 = 0;
	int count = 0,temp1 = 1,temp2 = 1;
	scanf("%d", &n1);
	scanf("%d", &n2);
	sum1=two(n1);
	sum2=two(n2);
	printf("%d\n", sum1);
	printf("%d\n", sum2);
	/*answer = sum1^sum2;*//*异或只能同位数才能实现*/
	/*printf("%d",  answer);*/
	while(sum1!=0&&sum2!=0)
	{
		temp1 = sum1 % 10;
		temp2 = sum2 % 10;
		if (temp1 == temp2)
			count++;
		sum1 /= 10;
		sum2 /= 10;

	}
	printf("%d",32-count);
	system("pause");
	return 0;
}