1.递归和非递归分别实现求第n个斐波那契数。
int fib(int n)
{if (n<2)
return 1;
else
return fib(n-1)+fib(n-2);
}

int fib(int n)//1 1 2 3 5 8 13 21*******
{int a=1,b=1;
int c;
while (n-2)
{
c=a+b;
a=b;
b=c;
}
return c;
}
int fib1(int n)
{
 int  an,an_1=1,an_2=1,i;
  if（n<=2）return 1;
  for(i=2;i<n;i++)
  {
    an=an_1+an_2;
    an_2=an_1;
    an_1=an;
  }
}
2.编写一个函数实现n^k，使用递归实现
int multiple (int n,int k)
{if (k<=0 )
return 1;
else
return n*multiple(n, k - 1);
}
3. 写一个递归函数DigitSum(n)，输入一个非负整数，返回组成它的数字之和，例如，调用DigitSum(1729)，则应该返回1+7+2+9，它的和是19
int DigitSum (int n)
{if (n>9)
return n%10+DigitSum(n/10);
else return n;
}

int DigitSum (int n)
{
if(n==0) return 0;
return n%10+DigitSum(n/10);/尾递归
}
4. 编写一个函数reverse_string(char * string)（递归实现）
实现：将参数字符串中的字符反向排列。
要求：不能使用C函数库中
的字符串操作函数。
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
void reverse_string(char *string)
{
	if (*string == '\0')
		return;
	reverse_string(string + 1);
	printf("%c", *string);
}
int main()
{
	char str[10] = "abcd";
	reverse_string(str);
	system("pause");
	return 0;

}
5.递归和非递归分别实现strlen
int my_strlen (char*str)
{
      if(*str=='\0') 
      return 0;
return 1+my_strlen(str+1);
}
6.递归和非递归分别实现求n的阶乘
int multiply(int n)
{
if(n==1) return 1;
return n*multiply(n-1);
}
int multiple (int n)
{int sum=1;
 for (int i=1;i<=n;i++)
{
 sum*=i;
}
return sum;
}
7.递归方式实现打印一个整数的每一位
int print()
{
printf("%d",n%10);
if (n>9)
print(n/10);
}

void print(int n)
{
if(n==0)
 return ;
print(n/10);
printf("%d",n%10);
}
